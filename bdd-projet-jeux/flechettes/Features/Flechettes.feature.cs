// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace flechettes.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class JeuDeFlechettes501Feature : object, Xunit.IClassFixture<JeuDeFlechettes501Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Flechettes.feature"
#line hidden
        
        public JeuDeFlechettes501Feature(JeuDeFlechettes501Feature.FixtureData fixtureData, flechettes_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Jeu de Fléchettes 501", "  En tant que joueur de fléchettes\r\n  Je veux pouvoir jouer une partie de fléchet" +
                    "tes 501\r\n  Afin de pouvoir défier mes amis et suivre mon score", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("une nouvelle partie de fléchettes est créée", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("le mode de jeu est \"501\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
    testRunner.And("la partie nécessite un finish \"double out\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Commencer une partie avec deux joueurs")]
        [Xunit.TraitAttribute("FeatureTitle", "Jeu de Fléchettes 501")]
        [Xunit.TraitAttribute("Description", "Commencer une partie avec deux joueurs")]
        public virtual void CommencerUnePartieAvecDeuxJoueurs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Commencer une partie avec deux joueurs", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 11
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 12
    testRunner.Given("les joueurs \"Alice\" et \"Bob\" rejoignent la partie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
    testRunner.When("la partie commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.Then("le score de \"Alice\" devrait être 501", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
    testRunner.And("le score de \"Bob\" devrait être 501", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
    testRunner.And("c\'est le tour de \"Alice\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
    testRunner.And("la partie devrait être \"En cours\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Lancer des fléchettes et calculer le score")]
        [Xunit.TraitAttribute("FeatureTitle", "Jeu de Fléchettes 501")]
        [Xunit.TraitAttribute("Description", "Lancer des fléchettes et calculer le score")]
        public virtual void LancerDesFlechettesEtCalculerLeScore()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Lancer des fléchettes et calculer le score", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 19
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 20
    testRunner.Given("les joueurs \"Alice\" et \"Bob\" rejoignent la partie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 21
    testRunner.And("la partie commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fléchette",
                            "Zone",
                            "Multiplicateur",
                            "Points"});
                table1.AddRow(new string[] {
                            "1",
                            "20",
                            "Single",
                            "20"});
                table1.AddRow(new string[] {
                            "2",
                            "19",
                            "Double",
                            "38"});
                table1.AddRow(new string[] {
                            "3",
                            "18",
                            "Triple",
                            "54"});
#line 22
    testRunner.When("\"Alice\" lance et marque les points suivants:", ((string)(null)), table1, "When ");
#line hidden
#line 27
    testRunner.Then("le score de \"Alice\" devrait être 389", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
    testRunner.And("c\'est le tour de \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calcul du score avec miss")]
        [Xunit.TraitAttribute("FeatureTitle", "Jeu de Fléchettes 501")]
        [Xunit.TraitAttribute("Description", "Calcul du score avec miss")]
        public virtual void CalculDuScoreAvecMiss()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calcul du score avec miss", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 30
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 31
    testRunner.Given("les joueurs \"Alice\" et \"Bob\" rejoignent la partie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
    testRunner.And("la partie commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fléchette",
                            "Zone",
                            "Multiplicateur",
                            "Points"});
                table2.AddRow(new string[] {
                            "1",
                            "20",
                            "Single",
                            "20"});
                table2.AddRow(new string[] {
                            "2",
                            "0",
                            "Miss",
                            "0"});
                table2.AddRow(new string[] {
                            "3",
                            "19",
                            "Single",
                            "19"});
#line 33
    testRunner.When("\"Alice\" lance et marque les points suivants:", ((string)(null)), table2, "When ");
#line hidden
#line 38
    testRunner.Then("le score de \"Alice\" devrait être 462", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
    testRunner.And("c\'est le tour de \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Bust - dépassement du score (score négatif)")]
        [Xunit.TraitAttribute("FeatureTitle", "Jeu de Fléchettes 501")]
        [Xunit.TraitAttribute("Description", "Bust - dépassement du score (score négatif)")]
        public virtual void Bust_DepassementDuScoreScoreNegatif()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bust - dépassement du score (score négatif)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 41
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 42
    testRunner.Given("les joueurs \"Alice\" et \"Bob\" rejoignent la partie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 43
    testRunner.And("la partie commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
    testRunner.And("le score de \"Alice\" est 50", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fléchette",
                            "Zone",
                            "Multiplicateur",
                            "Points"});
                table3.AddRow(new string[] {
                            "1",
                            "20",
                            "Triple",
                            "60"});
#line 45
    testRunner.When("\"Alice\" lance et marque les points suivants:", ((string)(null)), table3, "When ");
#line hidden
#line 48
    testRunner.Then("le score de \"Alice\" devrait être 50", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
    testRunner.And("le message devrait être \"Bust! Score remis à 50\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
    testRunner.And("c\'est le tour de \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Bust - finir sur un score de 1 (impossible de finir avec double)")]
        [Xunit.TraitAttribute("FeatureTitle", "Jeu de Fléchettes 501")]
        [Xunit.TraitAttribute("Description", "Bust - finir sur un score de 1 (impossible de finir avec double)")]
        public virtual void Bust_FinirSurUnScoreDe1ImpossibleDeFinirAvecDouble()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bust - finir sur un score de 1 (impossible de finir avec double)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 52
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 53
    testRunner.Given("les joueurs \"Alice\" et \"Bob\" rejoignent la partie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 54
    testRunner.And("la partie commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
    testRunner.And("le score de \"Alice\" est 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fléchette",
                            "Zone",
                            "Multiplicateur",
                            "Points"});
                table4.AddRow(new string[] {
                            "1",
                            "1",
                            "Single",
                            "1"});
                table4.AddRow(new string[] {
                            "2",
                            "1",
                            "Single",
                            "1"});
#line 56
    testRunner.When("\"Alice\" lance et marque les points suivants:", ((string)(null)), table4, "When ");
#line hidden
#line 60
    testRunner.Then("le score de \"Alice\" devrait être 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
    testRunner.And("le message devrait être \"Bust! Score remis à 3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
    testRunner.And("c\'est le tour de \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Victoire avec double out")]
        [Xunit.TraitAttribute("FeatureTitle", "Jeu de Fléchettes 501")]
        [Xunit.TraitAttribute("Description", "Victoire avec double out")]
        public virtual void VictoireAvecDoubleOut()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Victoire avec double out", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 64
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 65
    testRunner.Given("les joueurs \"Alice\" et \"Bob\" rejoignent la partie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 66
    testRunner.And("la partie commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
    testRunner.And("le score de \"Alice\" est 32", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fléchette",
                            "Zone",
                            "Multiplicateur",
                            "Points"});
                table5.AddRow(new string[] {
                            "1",
                            "16",
                            "Double",
                            "32"});
#line 68
    testRunner.When("\"Alice\" lance et marque les points suivants:", ((string)(null)), table5, "When ");
#line hidden
#line 71
    testRunner.Then("le score de \"Alice\" devrait être 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
    testRunner.And("\"Alice\" devrait être le gagnant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
    testRunner.And("la partie devrait être \"Terminée\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
    testRunner.And("le message devrait être \"Alice a gagné!\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Tentative de victoire sans double out")]
        [Xunit.TraitAttribute("FeatureTitle", "Jeu de Fléchettes 501")]
        [Xunit.TraitAttribute("Description", "Tentative de victoire sans double out")]
        public virtual void TentativeDeVictoireSansDoubleOut()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tentative de victoire sans double out", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 76
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 77
    testRunner.Given("les joueurs \"Alice\" et \"Bob\" rejoignent la partie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 78
    testRunner.And("la partie commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
    testRunner.And("le score de \"Alice\" est 20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fléchette",
                            "Zone",
                            "Multiplicateur",
                            "Points"});
                table6.AddRow(new string[] {
                            "1",
                            "20",
                            "Single",
                            "20"});
#line 80
    testRunner.When("\"Alice\" lance et marque les points suivants:", ((string)(null)), table6, "When ");
#line hidden
#line 83
    testRunner.Then("le score de \"Alice\" devrait être 20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 84
    testRunner.And("le message devrait être \"Bust! Doit finir avec un double\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
    testRunner.And("c\'est le tour de \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Partie complète avec alternance de joueurs")]
        [Xunit.TraitAttribute("FeatureTitle", "Jeu de Fléchettes 501")]
        [Xunit.TraitAttribute("Description", "Partie complète avec alternance de joueurs")]
        public virtual void PartieCompleteAvecAlternanceDeJoueurs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partie complète avec alternance de joueurs", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 87
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 88
    testRunner.Given("les joueurs \"Alice\" et \"Bob\" rejoignent la partie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 89
    testRunner.And("la partie commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fléchette",
                            "Zone",
                            "Multiplicateur",
                            "Points"});
                table7.AddRow(new string[] {
                            "1",
                            "20",
                            "Triple",
                            "60"});
                table7.AddRow(new string[] {
                            "2",
                            "20",
                            "Triple",
                            "60"});
                table7.AddRow(new string[] {
                            "3",
                            "20",
                            "Triple",
                            "60"});
#line 91
    testRunner.When("\"Alice\" lance et marque les points suivants:", ((string)(null)), table7, "When ");
#line hidden
#line 96
    testRunner.Then("le score de \"Alice\" devrait être 321", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
    testRunner.And("c\'est le tour de \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fléchette",
                            "Zone",
                            "Multiplicateur",
                            "Points"});
                table8.AddRow(new string[] {
                            "1",
                            "19",
                            "Triple",
                            "57"});
                table8.AddRow(new string[] {
                            "2",
                            "19",
                            "Triple",
                            "57"});
                table8.AddRow(new string[] {
                            "3",
                            "19",
                            "Triple",
                            "57"});
#line 99
    testRunner.When("\"Bob\" lance et marque les points suivants:", ((string)(null)), table8, "When ");
#line hidden
#line 104
    testRunner.Then("le score de \"Bob\" devrait être 330", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 105
    testRunner.And("c\'est le tour de \"Alice\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Gestion des différentes zones du plateau")]
        [Xunit.TraitAttribute("FeatureTitle", "Jeu de Fléchettes 501")]
        [Xunit.TraitAttribute("Description", "Gestion des différentes zones du plateau")]
        public virtual void GestionDesDifferentesZonesDuPlateau()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Gestion des différentes zones du plateau", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 107
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 108
    testRunner.Given("les joueurs \"Alice\" et \"Bob\" rejoignent la partie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 109
    testRunner.And("la partie commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fléchette",
                            "Zone",
                            "Multiplicateur",
                            "Points"});
                table9.AddRow(new string[] {
                            "1",
                            "25",
                            "Single",
                            "25"});
                table9.AddRow(new string[] {
                            "2",
                            "25",
                            "Double",
                            "50"});
                table9.AddRow(new string[] {
                            "3",
                            "25",
                            "Bull",
                            "50"});
#line 110
    testRunner.When("\"Alice\" lance et marque les points suivants:", ((string)(null)), table9, "When ");
#line hidden
#line 115
    testRunner.Then("le score de \"Alice\" devrait être 376", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Calculs de score avec différents multiplicateurs")]
        [Xunit.TraitAttribute("FeatureTitle", "Jeu de Fléchettes 501")]
        [Xunit.TraitAttribute("Description", "Calculs de score avec différents multiplicateurs")]
        [Xunit.InlineDataAttribute("1", "Single", "1", "500", new string[0])]
        [Xunit.InlineDataAttribute("1", "Double", "2", "499", new string[0])]
        [Xunit.InlineDataAttribute("1", "Triple", "3", "498", new string[0])]
        [Xunit.InlineDataAttribute("20", "Single", "20", "481", new string[0])]
        [Xunit.InlineDataAttribute("20", "Double", "40", "461", new string[0])]
        [Xunit.InlineDataAttribute("20", "Triple", "60", "441", new string[0])]
        [Xunit.InlineDataAttribute("25", "Single", "25", "476", new string[0])]
        [Xunit.InlineDataAttribute("25", "Double", "50", "451", new string[0])]
        [Xunit.InlineDataAttribute("25", "Bull", "50", "451", new string[0])]
        public virtual void CalculsDeScoreAvecDifferentsMultiplicateurs(string zone, string multiplicateur, string points, string score_Final, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("zone", zone);
            argumentsOfScenario.Add("multiplicateur", multiplicateur);
            argumentsOfScenario.Add("points", points);
            argumentsOfScenario.Add("score_final", score_Final);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculs de score avec différents multiplicateurs", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 117
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 118
    testRunner.Given("les joueurs \"Alice\" et \"Bob\" rejoignent la partie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 119
    testRunner.And("la partie commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 120
    testRunner.When(string.Format("\"Alice\" lance dans la zone {0} avec multiplicateur {1}", zone, multiplicateur), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 121
    testRunner.Then(string.Format("les points marqués devraient être {0}", points), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 122
    testRunner.And(string.Format("le score de \"Alice\" devrait être {0}", score_Final), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validation des lancers invalides")]
        [Xunit.TraitAttribute("FeatureTitle", "Jeu de Fléchettes 501")]
        [Xunit.TraitAttribute("Description", "Validation des lancers invalides")]
        public virtual void ValidationDesLancersInvalides()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validation des lancers invalides", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 136
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 137
    testRunner.Given("les joueurs \"Alice\" et \"Bob\" rejoignent la partie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 138
    testRunner.And("la partie commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 139
    testRunner.When("\"Alice\" tente de lancer dans une zone invalide \"0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 140
    testRunner.Then("une erreur devrait être levée \"Zone invalide\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 141
    testRunner.And("le score de \"Alice\" devrait rester 501", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Limite de 3 fléchettes par tour")]
        [Xunit.TraitAttribute("FeatureTitle", "Jeu de Fléchettes 501")]
        [Xunit.TraitAttribute("Description", "Limite de 3 fléchettes par tour")]
        public virtual void LimiteDe3FlechettesParTour()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Limite de 3 fléchettes par tour", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 143
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 144
    testRunner.Given("les joueurs \"Alice\" et \"Bob\" rejoignent la partie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 145
    testRunner.And("la partie commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
    testRunner.When("\"Alice\" lance 3 fléchettes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 147
    testRunner.Then("\"Alice\" ne peut plus lancer de fléchettes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 148
    testRunner.And("c\'est le tour de \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Statistiques de la partie")]
        [Xunit.TraitAttribute("FeatureTitle", "Jeu de Fléchettes 501")]
        [Xunit.TraitAttribute("Description", "Statistiques de la partie")]
        public virtual void StatistiquesDeLaPartie()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Statistiques de la partie", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 150
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 151
    testRunner.Given("les joueurs \"Alice\" et \"Bob\" rejoignent la partie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 152
    testRunner.And("la partie commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fléchette",
                            "Zone",
                            "Multiplicateur",
                            "Points"});
                table10.AddRow(new string[] {
                            "1",
                            "20",
                            "Triple",
                            "60"});
                table10.AddRow(new string[] {
                            "2",
                            "20",
                            "Triple",
                            "60"});
                table10.AddRow(new string[] {
                            "3",
                            "20",
                            "Triple",
                            "60"});
#line 153
    testRunner.When("\"Alice\" lance et marque les points suivants:", ((string)(null)), table10, "When ");
#line hidden
#line 158
    testRunner.Then("la moyenne de \"Alice\" devrait être 180", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 159
    testRunner.And("le nombre total de fléchettes de \"Alice\" devrait être 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 160
    testRunner.And("le meilleur score de \"Alice\" devrait être 180", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                JeuDeFlechettes501Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                JeuDeFlechettes501Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
